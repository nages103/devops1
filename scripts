apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: petclinic-deployment
  namespace: pet
spec:
  selector:
    matchLabels:
      app: petclinic-deployment
  replicas: 1 
  template:
    metadata:
      labels:
        app: petclinic-deployment
    spec:
      containers:
      - name: petclinic-deployment
        image:  188696658254.dkr.ecr.us-east-2.amazonaws.com/k8-pet:latest
        ports:
        - containerPort: 8080
---


kind: Service
apiVersion: v1
metadata:
  name: petclinic-service
  namespace: pet
spec:
  selector:
    app: petclinic-deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---








apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: petclinic-ing
  namespace: pet
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: 

    http:
      paths:
      - path:
        backend:
          serviceName: petclinic-service
          servicePort: 80



apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: petclinic-ing
  namespace: pet
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  rules:
  - host: k8-pet.joshmc.xyz     
    http:
      paths:
      - path: /
        backend:
          serviceName: petclinic-service
          servicePort: http
  tls:
  - hosts:
      - k8-pet.joshmc.xyz
    secretName: petclinic-secret






























FROM maven:3.6.3-openjdk-11 AS maven
RUN apt-get update -y && apt-get upgrade -y && apt-get install git -y && apt-get install unzip -y
WORKDIR /opt
RUN wget https://mirrors.estointernet.in/apache/tomcat/tomcat-9/v9.0.50/bin/apache-tomcat-9.0.50-windows-x64.zip
RUN  unzip apache-tomcat-9.0.50-windows-x64.zip
RUN mv apache-tomcat-9.0.50 tomcat
RUN chmod -R 700 tomcat
WORKDIR /opt
RUN git clone https://github.com/nages103/spring-framework-petclinic.git
WORKDIR /opt/spring-framework-petclinic
RUN mvn clean package
WORKDIR /opt/spring-framework-petclinic/target
RUN cp -R petclinic.war /opt/tomcat/webapps/
EXPOSE 8080
CMD chmod +x /opt/tomcat/bin/catalina.sh
CMD /opt/tomcat/bin/catalina.sh run
Secure Your argocd-server:
--------------------------
1. Create a namespace

   kubectl create namespace cert-manager

2. Install cert-manager

kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.12.0/cert-manager.yaml

3: Create a certificate issuer

vi certificate-issuer.yaml 

apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: cert-manager
spec:
  acme:
    # The ACME server URL
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: mrkenanbek@gmail.com
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-prod
    # Enable the HTTP-01 challenge provider
    solvers:
    - http01:
        ingress:
          class: nginx

and apply changes:

kubectl apply -f certificate-issuer.yaml

4. Update your ingress.yaml file with annotations on metadata and tls under spec

metadata:
  name: codekn-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
      - codekn.com(Your Domain Name)
    secretName: argocd-secret

  Apply these changes and apply it.

5. Referring purpose your ingress.yaml file looks like(Its optional)

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: codekn-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
      - codekn.com
    secretName: codekn-tls
  rules:
  - host: codekn.com
    http:
      paths:
      - path: /
        backend:
          serviceName: codekn-service
          servicePort: 8081
      - path: /api
        backend:
          serviceName: codekn-service
          servicePort: 8082
  - host: dev.codekn.com
    http:
      paths:
        - path: /
          backend:
            serviceName: codekn-service
            servicePort: 8082
        - path: /api
          backend:
            serviceName: codekn-service
            servicePort: 8082

